# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
  - task: Gradle@3
    displayName: Build
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'build'
      publishJUnitResults: true
      testResultsFiles: '*/TEST-.xml'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: false
  
  - task: CopyFiles@2
    displayName: Copia archivos
    inputs:
      sourceFolder: '$(Build.SourcesDirectory)'
      contents: |
          */build/libs/.jar
          */build//.xml
      targetFolder: '$(Build.ArtifactStagingDirectory)'

  - task: PublishBuildArtifacts@1
    displayName: Publica artefactos
    inputs:
      pathToPublish: '$(Build.ArtifactStagingDirectory)'
      artifactName: appJar
      publishLocation: 'Container'
  - task: DownloadBuildArtifacts@0
    displayName: Descarga Jar
    inputs:
      buildType: 'current'
      downloadType: 'single'
      artifactName: 'appJar'
      downloadPath: '$(Pipeline.Workspace)'
      
  - task: SonarCloudPrepare@1
    displayName: 'Code Review'
    inputs:
      SonarCloud: 'SonarCloudhg'
      organization: 'hugogonzar'
      scannerMode: 'Other'
      extraProperties: |
        sonar.coverage.jacoco.xmlReportPaths=$(Pipeline.Workspace)/appJar/build/reports/jacoco/test/jacocoTestReport.xml
  
  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: "build jacocoTestReport"
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      sqGradlePluginVersionChoice: 'specify'
      sonarQubeGradlePluginVersion: '3.3'
    displayName: 'Analyze current Branch'
      
  - task: SonarCloudPublish@1
    inputs:
      pollingTimeoutSec: '300'
    displayName: 'Publish Analysis Results'
    
  - task: Docker@2
   inputs:
    containerRegistry: 'Docker'
    command: 'login'
   displayName: Docker registry login
    
  - task: Docker@2
   inputs:
    containerRegistry: 'Docker'
    repository: 'hugogonzar/trabajosdevops'
    command: 'build'
    Dockerfile: '**/Dockerfile'
    tags: latest
   displayName: Build Image

 - task: Docker@2
  displayName: Docker push
  inputs:
    containerRegistry: 'Docker'
    repository: ' hugogonzar/trabajosdevops'
    command: 'push'
    tags: 'latest'
 - task: KubectlInstaller@0
  displayName: Install Kubectl
  inputs:
    kubectlVersion: 'latest'
 - task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'Connect kubernetes'
    namespace: 'default'
    command: 'login'
 - task: Kubernetes@1
   displayName: Kubernetes container deploy
   inputs:
     connectionType: 'Kubernetes Service Connection'
     kubernetesServiceEndpoint: 'Connect kubernetes'
     namespace: 'default'
     command: 'apply'
     arguments: '-f kubernetes/web-cfg.yaml'
     secretType: 'dockerRegistry'
     containerRegistryType: 'Azure Container Registry'
 - task: Kubernetes@1
   inputs:
    connectionType: 'Azure Resource Manager'
    azureSubscriptionEndpoint: 'Azure subscription 1(b5825397-99b4-4688-a061-129df71bbf2a)'
    azureResourceGroup: 'devop_group'
    kubernetesCluster: 'devops'
    #useClusterAdmin: true
    namespace: 'default'
    command: 'expose'
    arguments: 'deployment web-cfg --type=LoadBalancer --name=devops-hugogonzarosas'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry'
   continueOnError: true
   displayName: Expose deployment
 - script: |
    sleep 10
    ipApp=$(kubectl get services devops-hugogonzarosas --output jsonpath='{.status.loadBalancer.ingress[0].ip}')
    echo $ipApp
    URLApp=http://$ipApp:8080
    echo $URLApp
    echo "##vso[task.setvariable variable=appDeploy;isOutput=true]$URLApp"
   name: getip
   displayName: Get IP
